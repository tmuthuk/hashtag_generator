package main.kotlin.com.hashtagsimport io.ktor.application.callimport io.ktor.http.ContentTypeimport io.ktor.response.respondTextimport io.ktor.routing.getimport io.ktor.routing.routingimport io.ktor.server.engine.embeddedServerimport io.ktor.server.netty.Nettyimport java.io.*import kotlin.random.Randomval HASHTAG_MAX_COUNT = 27object HashTagGeneratorMain {        @JvmStatic        fun main(args: Array<String>) {                /**                 * Generate unique combinations of hashtags                1. Load the hashtags to a text file                2. Then device a way to generate unique combinations                3. everytime a unique combination is generated , maybe hash the combination and store the hash in a file..                4. next time when you’re generating the hash, compare it the existing ones , if it’s already generated then generate a different one                5. If it’s different return the hashes                 */                // Load hashtags in memory and Generate hashtags//        main.kotlin.generateHashTagsList(main.kotlin.loadHashtagsFromFile().toSet()).joinToString(" ")                // TODO: Make this a continuously running program                // TODO: Hash it to check if this combo has been generated before                // Append the strings together//        val hashStr = set.joinToString(" ")                println(generateHashTagsList(loadHashtagsFromFile().toSet()).joinToString(" "))                val server = embeddedServer(Netty, 8080) {                        routing {                                get("/") {                                        call.respondText("Hello World", ContentType.Text.Plain)                                }                                get("generate-hashtags") {                                        call.respondText(generateHashTagsList(loadHashtagsFromFile().toSet()).joinToString(" "), ContentType.Text.Plain)                                }                        }                }                server.start(wait = true)        }        /**         * Function to read the hashtags from the file and load it in memory         */        fun loadHashtagsFromFile(): List<String> {                val isr: InputStream = this.javaClass.classLoader.getResourceAsStream("hashtags_sources.txt")                val bsr = BufferedReader(InputStreamReader(isr))                val tags = bsr.readLines().distinct()                // TODO: Write Unique ones back into the file                println("Totoal uniqe tags ${tags.size}")                return tags        }        fun generateHashTagsList(rawTags: Set<String>): Set<String> {                val tagsList = HashSet<String>()                // loop until the random number generator generates 30 unique hashtags                while (tagsList.size != HASHTAG_MAX_COUNT) {                        tagsList.clear()                        // generate random number al at once                        val randomValues = List(HASHTAG_MAX_COUNT) { Random.nextInt(0, rawTags.count()) }                        // pick the tags from the set                        randomValues.map { index -> tagsList.add(rawTags.elementAt(index)) }                }                return tagsList        }}