import java.io.Fileimport kotlin.random.Randomval HASHTAG_MAX_COUNT = 30fun main(args: Array<String>) {        /**         * Generate unique combinations of hashtags                1. Load the hashtags to a text file                2. Then device a way to generate unique combinations                3. everytime a unique combination is generated , maybe hash the combination and store the hash in a file..                4. next time when you’re generating the hash, compare it the existing ones , if it’s already generated then generate a different one                5. If it’s different return the hashes         */        // Load hashtags in memory        val tags = loadHashtagsFromFile("/Users/tamil/myGit/hashtag_generator/resources/hashtags_sources.txt")        // Generate hashtags        val set: Set<String> = generateHashTagsList(tags.size, tags.toSet())        // TODO: Make this a continuously running program        // TODO: Hash it to check if this combo has been generated before        // Append the strings together        val hashStr = set.joinToString(" ")        println(hashStr)}/** * Function to read the hashtags from the file and load it in memory */fun loadHashtagsFromFile(filename: String): List<String> {        val tags = File(filename).readLines().distinct()        // TODO: Write Unique ones back into the file        return tags}fun generateHashTagsList(count: Int, rawTags: Set<String>): Set<String> {        val tagsList =  HashSet<String>()        // loop until the random number generator generates 30 unique hashtags        while(tagsList.size != HASHTAG_MAX_COUNT) {                tagsList.clear()                // generate random number al at once                val randomValues = List(HASHTAG_MAX_COUNT) { Random.nextInt(0, count) }                // pick the tags from the set                randomValues.map { index -> tagsList.add(rawTags.elementAt(index)) }        }        return tagsList}